#   @author LinhengXilan
#   @date 2025-9-20
#   @version build13

cmake_minimum_required(VERSION 3.10)
project(SandTable LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin/cmake_Debug")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin/cmake_Debug/")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin/cmake_Debug/")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin/cmake_Release/")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin/cmake_Release/")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin/cmake_Release/")

message("\nExecutable file output path: " ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
message("Dynamic library file output path: " ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
message("Static Library file output path: " ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
message(" ")

include(cmake/PrintCompilerInfo.cmake)
include(cmake/SetCompileOption.cmake)

# glad
add_library(glad STATIC library/glad/glad/src/gl.c)
target_include_directories(glad PRIVATE library/glad/glad/include/)

# ImGui
set(IMGUI_SOURCE_PATH library/imgui/imgui/)
file(GLOB ImGuiSource ${IMGUI_SOURCE_PATH}*.cpp)
add_library(ImGui STATIC ${ImGuiSource})
target_include_directories(ImGui PRIVATE ${IMGUI_SOURCE_PATH})

# SandTable
set(SandTableSource ${PROJECT_SOURCE_DIR}/SandTable/src/)
set(SandTableLibrary ${PROJECT_SOURCE_DIR}/library/)
file(GLOB_RECURSE SandTableSourceFlie ${SandTableSource}*.cpp)

add_library(SandTable SHARED ${SandTableSourceFlie})
target_precompile_headers(SandTable PRIVATE ${SandTableSource}pch.h)

target_compile_definitions(SandTable PRIVATE SANDTABLE_BUILD_DLL)
target_include_directories(SandTable PRIVATE ${SandTableSource})
target_include_directories(SandTable PRIVATE ${SandTableLibrary}spdlog/include/)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}glfw/)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}glad/glad/include/)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}imgui/)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}glm/)

target_link_libraries(SandTable PRIVATE glad)
target_link_libraries(SandTable PRIVATE ImGui)
target_link_libraries(SandTable PRIVATE opengl32.lib)
target_link_libraries(SandTable PRIVATE gdi32.lib)
target_link_libraries(SandTable PRIVATE user32.lib)

if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    target_link_libraries(SandTable PRIVATE ${SandTableLibrary}glfw/Debug/glfw3.lib)
else (${CMAKE_BUILD_TYPE} MATCHES "Release")
    target_link_libraries(SandTable PRIVATE ${SandTableLibrary}glfw/Release/glfw3.lib)
endif()

# Sandbox
set(SandboxSource ./Sandbox/src/)
add_executable(Sandbox ${SandboxSource}main.cpp)
target_include_directories(Sandbox PRIVATE ${SandTableSource})
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}spdlog/include/)
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}glfw/)
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}glad/glad/include/)
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}imgui/)
target_link_directories(Sandbox PRIVATE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
target_link_libraries(Sandbox PRIVATE SandTable)