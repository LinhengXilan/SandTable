#   @author LinhengXilan
#   @date 2025-8-14
#   @version build12

cmake_minimum_required(VERSION 4.0)
project(SandTable LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_C_STANDARD 17)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake-bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake-bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake-bin")

message("\nExecutable file output path: " ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
message("Dynamic library file output path: " ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
message("Static Library file output path: " ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
message(" ")

include(cmake/PrintCompilerInfo.cmake)
include(cmake/SetCompileOption.cmake)

# glad
add_library(glad STATIC SandTable/library/glad/src/gl.c)
target_include_directories(glad PRIVATE SandTable/library/glad/include/)

# ImGui
set(IMGUI_SOURCE_PATH SandTable/library/imgui/)
file(GLOB ImGuiSource ${IMGUI_SOURCE_PATH}*.cpp)
add_library(ImGui STATIC ${ImGuiSource})
target_include_directories(ImGui PRIVATE ${IMGUI_SOURCE_PATH})

# SandTable
set(SandTableSource ${PROJECT_SOURCE_DIR}/SandTable/src/)
set(SandTableLibrary ${PROJECT_SOURCE_DIR}/SandTable/library/)
file(GLOB_RECURSE SandTableSourceFlie ${SandTableSource}*.cpp)

add_library(SandTable SHARED ${SandTableSourceFlie})

target_precompile_headers(SandTable PRIVATE ${SandTableSource}pch.h)

target_compile_definitions(SandTable PRIVATE SANDTABLE_BUILD_DLL)
target_compile_definitions(SandTable PRIVATE _CRT_SECURE_NO_WARNINGS)

target_include_directories(SandTable PRIVATE ${SandTableSource})
target_include_directories(SandTable PRIVATE ${SandTableLibrary}spdlog/include)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}glfw/include)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}glad/include)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}imgui)

target_link_libraries(SandTable PRIVATE glad)
target_link_libraries(SandTable PRIVATE ImGui)
target_link_libraries(SandTable PRIVATE opengl32.lib)

if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    target_link_libraries(SandTable PRIVATE ${SandTableLibrary}glfw/lib/glfw3-debug.lib)
    target_compile_definitions(SandTable PRIVATE SANDTABLE_ENABLE_ASSERTS)
else (${CMAKE_BUILD_TYPE} MATCHES "Release")
    target_link_libraries(SandTable PRIVATE ${SandTableLibrary}glfw/lib/glfw3.lib)
endif()

# Sandbox
set(SandboxSource ./Sandbox/src/)
add_executable(Sandbox ${SandboxSource}main.cpp)
target_include_directories(Sandbox PRIVATE ${SandTableSource})
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}spdlog/include)
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}glfw/include)
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}glad/include)
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}imgui)
target_link_directories(Sandbox PRIVATE ${LIBRARY_OUTPUT_PATH})
target_link_libraries(Sandbox PRIVATE SandTable)