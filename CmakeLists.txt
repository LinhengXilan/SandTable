cmake_minimum_required(VERSION 3.31)
project(SandTable LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_BUILD_TYPE "Debug")
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/cmake-bin/)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/cmake-bin/)

add_compile_definitions(_UNICODE)
add_compile_definitions(UNICODE)
add_compile_definitions(_CONSOLE)
add_compile_options(/utf-8)
add_compile_options(/permissive-)
add_compile_options(/GS)
add_compile_options(/Zc:wchar_t)
add_compile_options(/Gm-)
add_compile_options(/sdl)
add_compile_options(/Zc:inline)
add_compile_options(/fp:precise)
add_compile_options(/errorReport:prompt)
add_compile_options(/WX-)
add_compile_options(/Zc:forScope)
add_compile_options(/Gd)
add_compile_options(/FC)
add_compile_options(/EHsc)
add_compile_options(/nologo)
add_compile_options(/diagnostics:column)
add_link_options(/NOLOGO)
add_link_options(/TLBID:1)
add_link_options(/MACHINE:X64)
add_link_options(/MANIFEST)
add_link_options(/NXCOMPAT)
add_link_options(/SUBSYSTEM:CONSOLE)
add_link_options(/MANIFESTUAC:"level='asInvoker' uiAccess='false'")
add_link_options(/ERRORREPORT:PROMPT)
if (MSVC AND ${CMAKE_BUILD_TYPE} MATCHES "Debug")
    add_compile_definitions(SANDTABLE_DEBUG)
    add_compile_definitions(_DEBUG)
    add_compile_options(/JMC)
    add_compile_options(/W3)
    add_compile_options(/ZI)
    add_compile_options(/Od)
    add_compile_options(/RTC1)
    add_compile_options(/MDd)
    add_link_options(/DEBUG)
    add_link_options(/INCREMENTAL)
    else (MSVC AND ${CMAKE_BUILD_TYPE} MATCHES "Release")
    add_compile_definitions(SANDTABLE_RELEASE)
    add_compile_definitions(_NDEBUG)
    add_compile_options(/GL)
    add_compile_options(/W3)
    add_compile_options(/Gy)
    add_compile_options(/Zi)
    add_compile_options(/O2)
    add_compile_options(/Oi)
    add_compile_options(/MD)
    add_link_options(/LTCG:incremental)
    add_link_options(/OPT:REF)
    add_link_options(/OPT:ICF)
endif ()

if (MSVC)
    add_compile_definitions(SANDTABLE_PLATFORM_WINDOWS)
endif ()


set(SandTableSource ${PROJECT_SOURCE_DIR}/SandTable/src/)
set(SandTableLibrary ${PROJECT_SOURCE_DIR}/SandTable/library/)
file(GLOB_RECURSE SandTableSourceFlie ${SandTableSource}*.cpp)
add_library(SandTable SHARED ${SandTableSourceFlie})
target_precompile_headers(SandTable PRIVATE ${SandTableSource}pch.h)
target_compile_definitions(SandTable PRIVATE SANDTABLE_BUILD_DLL)
target_compile_definitions(SandTable PRIVATE _WINDLL)
target_include_directories(SandTable PRIVATE ${SandTableSource})
target_include_directories(SandTable PRIVATE ${SandTableLibrary}spdlog/include)
target_include_directories(SandTable PRIVATE ${SandTableLibrary}glfw/include)
target_link_libraries(SandTable PRIVATE opengl32.lib)
if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    target_link_libraries(SandTable PRIVATE ${SandTableLibrary}glfw/lib/glfw3-debug.lib)
    target_compile_definitions(SandTable PRIVATE SANDTABLE_ENABLE_ASSERTS)
else (${CMAKE_BUILD_TYPE} MATCHES "Release")
    target_link_libraries(SandTable PRIVATE ${SandTableLibrary}glfw/lib/glfw3.lib)
endif()


set(SandboxSource ./Sandbox/src/)
add_executable(Sandbox ${SandboxSource}main.cpp)
target_include_directories(Sandbox PRIVATE ${SandTableSource})
target_include_directories(Sandbox PRIVATE ${SandTableLibrary}spdlog/include)
target_link_directories(Sandbox PRIVATE ${LIBRARY_OUTPUT_PATH})
target_link_libraries(Sandbox PRIVATE SandTable)